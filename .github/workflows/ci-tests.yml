name: Testowanie na r√≥≈ºnych platformach (repozytorium publiczne)
on: [push, pull_request]

jobs:
  test_linux_performance:
    # Linux: 4 CPU, 16 GB RAM, 14 GB SSD - pe≈Çna wydajno≈õƒá
    runs-on: ubuntu-latest
    steps:
      - name: Sprawd≈∫ zasoby systemu
        run: |
          echo "üñ•Ô∏è Informacje o systemie Linux (publiczne repo):"
          echo "CPU: $(nproc) rdzeni"
          echo "RAM: $(free -h | awk '/^Mem:/ {print $2}')"
          echo "Dysk: $(df -h / | awk 'NR==2 {print $2}')"
          echo "Architektura: $(uname -m)"

      - name: Test wydajno≈õci CPU
        run: |
          echo "üöÄ Uruchamianie intensywnych oblicze≈Ñ..."
          time for i in {1..1000000}; do echo $i > /dev/null; done
          echo "Test CPU zako≈Ñczony"

  test_windows_compatibility:
    # Windows: 4 CPU, 16 GB RAM - najnowszy dostƒôpny system
    runs-on: windows-latest
    steps:
      - name: Sprawd≈∫ ≈õrodowisko Windows
        run: |
          echo "ü™ü Informacje o systemie Windows:"
          echo "Procesor: $env:NUMBER_OF_PROCESSORS rdzeni"
          systeminfo | findstr "Total Physical Memory"
          echo "Architektura: $env:PROCESSOR_ARCHITECTURE"

      - name: Test kompatybilno≈õci PowerShell
        run: |
          echo "üí´ Test funkcji PowerShell..."
          Get-ComputerInfo | Select-Object TotalPhysicalMemory, CsProcessors

  test_macos_arm:
    # macOS ARM (M1): 3 rdzenie, 7 GB RAM - najnowsza architektura Apple
    runs-on: macos-latest
    steps:
      - name: Sprawd≈∫ ≈õrodowisko macOS ARM
        run: |
          echo "üçé Informacje o systemie macOS ARM:"
          echo "CPU: $(sysctl -n hw.ncpu) rdzeni"
          echo "RAM: $((($(sysctl -n hw.memsize) / 1024 / 1024 / 1024))) GB"
          echo "Architektura: $(uname -m)"
          echo "Model: $(sysctl -n hw.model)"
