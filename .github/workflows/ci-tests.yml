name: Poprawne zarządzanie powłokami w kontenerach
on: [push]

jobs:
  shell_progression:
    runs-on: ubuntu-latest
    container: alpine:latest

    steps:
      - name: Instalacja bash używając sh
        # Nie ustawiamy `shell: bash` - używamy domyślnej powłoki sh
        run: |
          echo "🔧 Instaluję bash używając powłoki sh..."
          # W Alpine Linux sh jest dostępne domyślnie
          apk add --no-cache bash
          echo "✅ Bash został zainstalowany"
          
          # Sprawdźmy czy bash jest teraz dostępny
          which bash && echo "🎯 Bash znaleziony w: $(which bash)"
          
          # Sprawdźmy wersję bash
          bash --version | head -1

      - name: Teraz możemy używać bash globalnie
        shell: bash  # Teraz bash jest już zainstalowany, więc możemy go używać
        run: |
          echo "🐚 Testowanie zaawansowanych funkcji bash:"
          
          # Tablice - funkcja dostępna tylko w bash
          fruits=("apple" "banana" "cherry" "date")
          echo "Lista owoców: ${fruits[@]}"
          echo "Pierwszy owoc: ${fruits[0]}"
          echo "Liczba owoców: ${#fruits[@]}"
          
          # Zaawansowane rozwijanie zmiennych
          filename="report.txt"
          echo "Pełna nazwa: $filename"
          echo "Nazwa bez rozszerzenia: ${filename%.txt}"
          echo "Tylko rozszerzenie: ${filename##*.}"
          
          # Operator sprawdzania plików specyficzny dla bash
          [[ -f "/.dockerenv" ]] && echo "✅ Jestem w kontenerze Docker" || echo "❌ Nie jestem w kontenerze"
          
          # Test złożonych warunków bash
          [[ ${#fruits[@]} -gt 3 ]] && echo "✅ Mamy więcej niż 3 owoce" || echo "❌ Mamy 3 lub mniej owoców"

      - name: Porównanie z sh dla edukacji
        shell: sh  # Celowo używamy sh żeby pokazać różnice
        run: |
          echo "🔧 Uruchamiam w sh - podstawowa funkcjonalność POSIX:"
          
          # W sh nie możemy używać tablic jak w bash
          # fruits=("apple" "banana")  # To by nie działało w sh!
          
          # Zamiast tego używamy prostych zmiennych
          fruits="apple banana cherry date"
          echo "Owoce jako string: $fruits"
          
          # Podstawowe sprawdzanie plików (kompatybilne z POSIX)
          if [ -f "/.dockerenv" ]; then
            echo "✅ W kontenerze (sprawdzenie kompatybilne z sh)"
          else
            echo "❌ Poza kontenerem"
          fi
          
          # Pokazanie różnic w składni
          echo "🎓 Różnice między sh a bash:"
          echo "- sh: używa [ ] do warunków"
          echo "- bash: może używać [[ ]] z dodatkowymi funkcjami"
          echo "- sh: nie ma tablic"
          echo "- bash: ma zaawansowane tablice i funkcje string"